
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  name        String?
  email       String     @unique
  password    String
  imageUrl    String?
  roleId      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookings    Booking[]
  expenses    Expense[]
  orders      Order[]
  payments    Payment[]
  role        Role?      @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "User_roleId_fkey")
}

model Room {
  id        String     @id @default(cuid())
  number    Int        @unique
  type      RoomType
  price     Decimal
  status    RoomStatus @default(AVAILABLE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookings  Booking[]
  orders    Order[]
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  phoneNumber String?
  fullName    String
  guest       String
  roomId      String
  checkIn     DateTime
  checkOut    DateTime
  paymentId   String?       @unique
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  room        Room          @relation(fields: [roomId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment     Payment?

  @@index([roomId], map: "Booking_roomId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

model MenuItem {
  id        String         @id @default(cuid())
  name      String
  price     Decimal
  category  String
  imageUrl  String?
  status    MenuItemStatus @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  orders    OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String?
  tableId   String?
  roomId    String?
  status    OrderStatus @default(PENDING)
  total     Decimal
  paymentId String?     @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  room      Room?       @relation(fields: [roomId], references: [id])
  table     Table?      @relation(fields: [tableId], references: [id])
  user      User?       @relation(fields: [userId], references: [id])
  items     OrderItem[]
  payment   Payment?

  @@index([roomId], map: "Order_roomId_fkey")
  @@index([tableId], map: "Order_tableId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([menuItemId], map: "OrderItem_menuItemId_fkey")
  @@index([orderId], map: "OrderItem_orderId_fkey")
}

model Table {
  id        String      @id @default(cuid())
  number    Int         @unique
  capacity  Int
  status    TableStatus @default(AVAILABLE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  orders    Order[]
}

model Payment {
  id          String        @id @default(cuid())
  userId      String?
  orderId     String        @unique
  bookingId   String?       @unique
  amount      Decimal
  otherAmount Decimal?
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  booking     Booking?      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user        User?         @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model ExpenseCategory {
  id       String    @id @default(cuid())
  name     String    @unique
  expenses Expense[]
}

model Expense {
  id          String          @id @default(cuid())
  description String
  categoryId  String
  amount      Decimal
  paidById    String
  type        String
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  paidBy      User            @relation(fields: [paidById], references: [id])

  @@index([categoryId], map: "Expense_categoryId_fkey")
  @@index([paidById], map: "Expense_paidById_fkey")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  users       User[]
  permissions Permission[] @relation("RolePermissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]   @relation("RolePermissions")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RoomType {
  SINGLE
  DOUBLE
  FAMILY
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum MenuItemStatus {
  AVAILABLE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  SERVED
  CANCELLED
  IS_PAID
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
